https://medium.com/pyradise/%E4%BD%BF%E7%94%A8-python-%E8%A7%A3%E7%B7%9A%E6%80%A7%E8%81%AF%E7%AB%8B%E6%96%B9%E7%A8%8B%E7%B5%84-470d0980ec0c

import numpy as np

dist_in_km = [3, 5, 10, 21.1, 42.195]
dist_in_mile = [d *0.62137 for d in dist_in_km]

#      np.array() -> 將原生 list 轉換為 ndarray
mile = np.array(dist_in_km)
mile = mile * 0.62137

print(mile)
print(np.arange(8))
print(np.arange(1,8))
print(np.arange(1,10,2))

arr = np.linspace(1,10,10)
print(arr,arr.dtype)
arr = arr.astype(int)
print(arr,arr.dtype) 

# ndarray 中僅能儲存單一種型別。
lst = [42.195, 'km', True]
for i in lst:
  print(type(i))
arr = np.array(lst)
for i in arr:
  print(type(i))

# 維度 1：向量（vector）  
u = np.array([8,7]).reshape(2,1)
v = np.array([8,7,6]).reshape(3,1)
print(u,'\n')
print(v,'\n')

# 維度 2：矩陣（matrix）
# 創造3x3 矩陣
mat = np.arange(0,9).reshape(3,3)
print(mat,'\n')

# 維度 3：張量（tensor）
ten = np.arange(1,25).reshape(2,4,3)
print(ten)

import numpy as np
import matplotlib.pyplot as plt
import seaborn
seaborn.reset_orig()

u = np.array([8,7]).reshape(2,1)
v = np.array([8,7,6]).reshape(3,1)
w = np.array([8,7,6,5]).reshape(4,1)
x = np.array([8,7,6,5,4]).reshape(5,1)

vecs = [u,v,w,x]

for vec in vecs:
    print(vec,'shape:',vec.shape,'size:',vec.size,'\n')


# 描繪一個 (x, y) 的向量
def plot_a_vector(x, y, tick=2):
  # 向量的起始點
  x0 = 0
  y0 = 0

  # 指定向量的終點
  dx = x
  dy = y

  # 指定座標軸的範圍
  max_val = max(abs(dx), abs(dy)) + 2
  plt.xlim(-max_val, max_val)
  plt.ylim(-max_val, max_val)
  ax = plt.gca()

  # 外框隱藏掉兩邊
  ax.spines['top'].set_color('none')
  ax.spines['right'].set_color('none')

  # 將剩餘的兩邊外框挪到原點
  ax.xaxis.set_ticks_position('bottom')
  ax.spines['bottom'].set_position(('data',0))
  ax.yaxis.set_ticks_position('left')
  ax.spines['left'].set_position(('data',0))

  # 標註文字
  if dx >= 0:
    adjust = 0.5
  else:
    adjust = -3
    ax.annotate('({}, {})'.format(dx, dy), xy=(dx, dy), xytext=(dx + adjust, dy))

  # 畫出向量
  plt.arrow(x0, y0, dx, dy, length_includes_head=True, head_width=0.3)

  # 調整刻度標籤
  plt.xticks(range(-max_val + 1, max_val - 1, tick))
  plt.yticks(range(-max_val + 1, max_val - 1, tick))
    
plt.subplot(2, 2, 1)
plot_a_vector(1, 4)
plt.subplot(2, 2, 2)
plot_a_vector(-5, 3)
plt.subplot(2, 2, 3)
plot_a_vector(-1, -5)
plt.subplot(2, 2, 4)
plot_a_vector(2, -3)
plt.show()



# 向量與向量的加減
u = np.array([2, 4]).reshape(2, 1)
v = np.array([3, 1]).reshape(2, 1)
print(u + v)

# 繪製兩個向量
def plot_two_vectors():
  # 向量的起始點
  x0 = 0
  y0 = 0
  # 指定向量的終點
  dx1 = 2
  dy1 = 4
  dx2 = 3
  dy2 = 1
  # 指定座標軸的範圍
  plt.xlim(-3, 6)
  plt.ylim(-3, 6)
  ax = plt.gca()
  # 外框隱藏掉兩邊
  ax.spines['top'].set_color('none')
  ax.spines['right'].set_color('none')
  # 將剩餘的兩邊外框挪到原點
  ax.xaxis.set_ticks_position('bottom')
  ax.spines['bottom'].set_position(('data',0))
  ax.yaxis.set_ticks_position('left')
  ax.spines['left'].set_position(('data',0))
  # 標註文字
  adjust = 0.5
  ax.annotate('({}, {})'.format(dx1, dy1), xy=(dx1, dy1), xytext=(dx1 + adjust, dy1))
  ax.annotate('({}, {})'.format(dx2, dy2), xy=(dx2, dy2), xytext=(dx2 + adjust, dy2))
  # 畫出向量
  plt.arrow(x0, y0, dx1, dy1, length_includes_head=True, head_width=0.3)
  plt.arrow(x0, y0, dx2, dy2, length_includes_head=True, head_width=0.3)
  
# 繪製向量相加的示意
def plot_adding_vectors():
  # 向量的起始點
  x0 = 0
  y0 = 0
  # 指定向量的終點
  dx1 = 2
  dy1 = 4
  dx2 = 5
  dy2 = 5
  # 指定座標軸的範圍
  plt.xlim(-3, 6)
  plt.ylim(-3, 6)
  ax = plt.gca()
  # 外框隱藏掉兩邊
  ax.spines['top'].set_color('none')
  ax.spines['right'].set_color('none')
  # 將剩餘的兩邊外框挪到原點
  ax.xaxis.set_ticks_position('bottom')
  ax.spines['bottom'].set_position(('data',0))
  ax.yaxis.set_ticks_position('left')
  ax.spines['left'].set_position(('data',0))
  # 標註文字
  adjust = 0.5
  ax.annotate('({}, {})'.format(dx1, dy1), xy=(dx1, dy1), xytext=(dx1 - adjust*3, dy1 - adjust*2))
  ax.annotate('({}, {})'.format(3, 1), xy=(dx2, dy2), xytext=(dx2 - adjust*4, dy2))
  ax.annotate('({}, {})'.format(dx2, dy2), xy=(dx2, dy2), xytext=(dx2 + adjust, dy2))
  # 畫出向量
  plt.arrow(x0, y0, dx1, dy1, length_includes_head=True, head_width=0.2, ls='dotted')
  plt.arrow(dx1, dy1, 3, 1, length_includes_head=True, head_width=0.2, ls = 'dotted')
  plt.arrow(x0, y0, dx2, dy2, length_includes_head=True, head_width=0.3)

# 繪製
plt.figure(figsize=(10, 4))
plt.subplot(1, 2, 1)
plot_two_vectors()
plt.subplot(1, 2, 2)
plot_adding_vectors()
plt.show()
